##
# Copyright 2022 Charles Y. Choi
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from xml.dom.minidom import getDOMImplementation
from regfmt import TopLevel, FieldNameAlign, VERSION
from regfmt.svggeometry import *
from regfmt.cssparser import parseCSS, cascadeStyles
from regfmt.centeralignlayout import writeFieldNameCenterSVG
from regfmt.stairleftlayout import writeStairLeftSVG


class SVGWriter:
    def __init__(self, registerDB: TopLevel, outfile, configFileName=None):
        self.registerDB = registerDB
        self.outfile = outfile
        self.styleSheet = StyleSheet()

        parseCSS(configFileName=configFileName, styleSheet=self.styleSheet)
        cascadeStyles(self.styleSheet)
        self.font = cssFontToImageFont(fontFamily=self.styleSheet.body.fontFamily,
                                       fontSize=self.styleSheet.body.fontSize)

    def createDocument(self, origin=None, size=None):
        dom = getDOMImplementation()
        doc = dom.createDocument(None, 'svg', None)
        topElement = doc.documentElement
        topElement.setAttribute('version', '1.1')
        topElement.setAttribute('xmlns', "http://www.w3.org/2000/svg")
        watermark = 'diagram generated by regfmt {} https://github.com/kickingvegas/regfmt'.format(VERSION)
        topElement.appendChild(doc.createComment(watermark))
        if origin:
            topElement.setAttribute('x', str(origin.x))
            topElement.setAttribute('y', str(origin.y))

        if size:
            topElement.setAttribute('width', str(size.width))
            topElement.setAttribute('height', str(size.height))

        return doc, topElement

    def compositeSVG(self, doc, topElement, topGroup, outfile):
        children = []
        topGroup.writeDOM(children, doc)
        for child in children:
            topElement.appendChild(child)
        doc.writexml(outfile, encoding='utf-8', addindent="  ", newl="\n")

    def writeSVG(self, registerDB: TopLevel = None):
        if registerDB is None:
            registerDB = self.registerDB

        # Layout Geometry - all decisions on the graphical layout of a register instance are done here.

        # Initialize container for geometry
        topGroup = Group()
        if registerDB.layout.fieldNameAlign == FieldNameAlign.center:
            origin, size = writeFieldNameCenterSVG(registerDB=registerDB,
                                                   topGroup=topGroup,
                                                   styleSheet=self.styleSheet,
                                                   font=self.font)

        elif registerDB.layout.fieldNameAlign == FieldNameAlign.stairLeft:
            origin, size = writeStairLeftSVG(registerDB=registerDB,
                                             topGroup=topGroup,
                                             styleSheet=self.styleSheet,
                                             font=self.font)
            # origin, size = self.writeFieldNameStairLeftSVG(registerDB, topGroup)

        doc, topElement = self.createDocument(origin=origin, size=size)

        # Write DOM and composite to SVG
        self.compositeSVG(doc, topElement, topGroup, self.outfile)
